#!/usr/bin/wish
#
# scanning progam for 1 stepper motor dimension. structure (if any;-) mainly
# taken from the ibm set of progs
#
# first version:                            Christian Kurtsiefer, 3.9.99
# version with red entry boxes      chk, 28.7.00

# works with analog counter card    chk 10.03.2004
# repaired negative number check    chk 18.3.04

# this program is for rotary stage DRT 40.  Because of the reduction ratio of the belts,
# it takes 600 steps to turn the target 360 degrees.  Each step has 64 microsteps. chk 11.08.04 
# all motors suffer from backlash.  added routine to approach any point from always the same direction Alexander Ling 17.09.04

# variable definitions and default values:
set nru 0
set RUNNING 0
set XAXMIN "" ; set XAXMAX "" ; set ZAXMIN "" ; set ZAXMAX ""
set wd [pwd]
set sd [pwd] ; set sdl $sd ; # saving directory
set COMMENT ""
set mspeed "400" ; # speed in steps per second
set gstat "idle" ; # current status
set motprog "/home/qitlab/programs/owis2/stepmotor2"
set countprog "/home/qitlab/programs/dt340/counter2"
set analogprog "/home/qitlab/programs/dt302/readallchannels_dt302"
set inmode 0 ; # counter mode: 0: counter, 1: analog input
set anagain 1; # analog input card gain

# Folgende Zeile repariert von 163390 auf 163930 10.1.2000 chk
set motconversion [expr 600*64/360] ; # conversion of deg to steps
set harmlesskeys {Tab Up Down Left Right Home End Prior Next}
set dispopt 0 ; # display option: 0=degree, 1=nanometer
set dispcnter 1
set henefirst 0.0 ; # position of HeNe laser first order in degree
set zeroorder -24.704 ; # initial position zero order for lambda conversion
set lamhene 632.8 ; # wavelength HeNe laser in nanometer
set grating [expr 1000/1.2] ; # grating periode in nanometer
set henefirsttmp $henefirst ; set zeroordertmp $zeroorder

set xstart 0 ; set XMININIT $xstart ; # start value
set xstart1 0 ; set XMININIT1 $xstart1 ; # start value
set xend 360 ; set XMAXINIT $xend ; # end value
set xend1 360 ; set XMAXINIT1 $xend1 ; # end value
set xinc 0.1 ; set XINCINIT $xinc ; # increment
set xinc1 0.1 ; set XINCINIT1 $xinc1 ; # increment
set xact $xstart;
set xact1 $xstart1;

set maxcounts 0 ;
set mcntsx $XMININIT ;


set ows 0 ; set XOWS $ows ; # optional wait in seconds
set itim 100 ; set ITIMINT $itim;  # integration time
set tmpfile "/tmp/scandatarot.dat"

# main button tree
frame .mfr
button .mfr.start -text "start 0" -command runproc
bind .mfr.start <Return> {.mfr.start invoke}
button .mfr.stop -text "stop 0" -command haltbutton
bind .mfr.stop <Return> {.mfr.stop invoke}
button .mfr.clear -text "clear 0" -command clearbutt
bind .mfr.clear <Return> {.mfr.clear invoke}
button .mfr.zero -text "zero 0" -command zerobutton
bind .mfr.zero <Return> {.mfr.zero invoke}

pack .mfr.start .mfr.stop .mfr.clear .mfr.zero -side left
pack .mfr

frame .sfr
button .sfr.start -text "start 1" -command runproc1
bind .sfr.start <Return> {.sfr.start invoke}
button .sfr.stop -text "stop 1" -command haltbutton
bind .sfr.stop <Return> {.sfr.stop invoke}
button .sfr.clear -text "clear 1" -command clearbutt1
bind .sfr.clear <Return> {.sfr.clear invoke}
button .sfr.zero -text "zero 1" -command zerobutton1
bind .sfr.zero <Return> {.sfr.zero invoke}

pack .sfr.start .sfr.stop .sfr.clear .sfr.zero -side left
pack .sfr

# refresh the current parameter
frame .actx
label .actx.t2 -text "   Status:"
label .actx.t3 -textvariable gstat -width 7
pack  .actx.t2 .actx.t3 -side left 
pack .actx


# entry structure for x values
frame .x -borderwidth 2 -relief ridge
label .x.t1 -text "from:"
label .x.t2 -text "°"
label .x.t3 -text "   to:"
label .x.t4 -text "°"
label .x.t5 -text "in steps of:"
label .x.t6 -text "°"
label .x.t9 -text "maximal value in channel"
label .x.t9a -textvariable dispcnter -relief raised -width 3
label .x.t9b -text ":"
label .x.t11 -text "at z="
label .x.t15 -text "°"
label .x.t10 -textvariable maxcounts -width 6 -anchor w
label .x.t12 -textvariable mcntsx -width 6 -anchor w

entry .x.e1 -width 6 -relief sunken -bd 2 -textvariable xstart
bind .x.e1 <Return> {
    if {[regexp {^\ *\-?[0-9.]+\ +$} "$xstart "] == 1} {
	set XMININIT $xstart
    }
    set xstart $XMININIT
    .x.e1 configure -fg black
}
bind .x.e1 <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.x.e1 configure -fg red }
}
entry .x.e2 -width 6 -relief sunken -bd 2 -textvariable xend
bind .x.e2 <Return> {
    if {[regexp {^\ *\-?[0-9.]+\ +$} "$xend "] == 1} {
	set XMAXINIT $xend
    }
    set xend $XMAXINIT
    .x.e2 configure -fg black
}
bind .x.e2 <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.x.e2 configure -fg red }
}
entry .x.e3 -width 6 -relief sunken -bd 2 -textvariable xinc
bind .x.e3 <Return> {
    if {[regexp {^\ *\-?[0-9.]+\ +$} "$xinc "] == 1} {
	set XINCINIT $xinc
    }
    set xinc $XINCINIT
    .x.e3 configure -fg black
}
bind .x.e3 <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.x.e3 configure -fg red }
}

label .x.t7 -text "  current x: "
label .x.t8 -textvariable xact -width 6 -anchor w

label .x.t0 -text "Rotary Stage 0"

button .x.go -text "go there"  -command gotherebutton
bind .x.t9a <ButtonPress-1>  {
    incr dispcnter
    if {$dispcnter >6} {set dispcnter 1}
}
bind .x.t9a <ButtonPress-3>  {
    incr dispcnter -1
    if {$dispcnter == 0 } {set dispcnter 6}
}

grid .x.t0
grid .x.t1 .x.e1 .x.t2 .x.t3 .x.e2 .x.t4
grid .x.t5 .x.e3 .x.t6 .x.t7 .x.t8
grid .x.t9 .x.t9a .x.t9b .x.t10
grid .x.t11 .x.t12 .x.t15 .x.go
pack .x

# entry structure for x1 values
frame .x1 -borderwidth 2 -relief ridge
label .x1.t1 -text "from:"
label .x1.t2 -text "°"
label .x1.t3 -text "   to:"
label .x1.t4 -text "°"
label .x1.t5 -text "in steps of:"
label .x1.t6 -text "°"

entry .x1.e1 -width 6 -relief sunken -bd 2 -textvariable xstart1
bind .x1.e1 <Return> {
    if {[regexp {^\ *\-?[0-9.]+\ +$} "$xstart1 "] == 1} {
        set XMININIT1 $xstart1
    }
    set xstart1 $XMININIT1
    .x1.e1 configure -fg black
}
bind .x1.e1 <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.x1.e1 configure -fg red }
}

entry .x1.e2 -width 6 -relief sunken -bd 2 -textvariable xend1
bind .x1.e2 <Return> {
    if {[regexp {^\ *\-?[0-9.]+\ +$} "$xend1 "] == 1} {
        set XMAXINIT1 $xend1
    }
    set xend1 $XMAXINIT1
    .x1.e2 configure -fg black
}
bind .x1.e2 <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.x1.e2 configure -fg red }
}

entry .x1.e3 -width 6 -relief sunken -bd 2 -textvariable xinc1
bind .x1.e3 <Return> {
    if {[regexp {^\ *\-?[0-9.]+\ +$} "$xinc1 "] == 1} {
        set XINCINIT1 $xinc1
    }
    set xinc1 $XINCINIT1
    .x1.e3 configure -fg black
}
bind .x1.e3 <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.x1.e3 configure -fg red }
}

label .x1.t7 -text "  current x1: "
label .x1.t8 -textvariable xact1 -width 6 -anchor w

label .x1.t0 -text "Rotary Stage 1"

grid .x1.t0
grid .x1.t1 .x1.e1 .x1.t2 .x1.t3 .x1.e2 .x1.t4
grid .x1.t5 .x1.e3 .x1.t6 .x1.t7 .x1.t8
pack .x1

# structure to do the fit
frame .wf -borderwidth 2 -relief ridge
button .wf.wb -text "do sine fit" -command regnu2
label .wf.t1 -text "visibility: "
label .wf.t2 -textvariable visibility -width 50
label .wf.t3 -text "+/- "
label .wf.t4 -textvariable dvis -width 50
grid .wf.wb 
grid .wf.t1 .wf.t2 .wf.t3 .wf.t4 
pack .wf

# motor speed entry
frame .ms
label .ms.t1 -text "motor speed"
label .ms.t2 -text "steps/sec"
entry .ms.e -relief sunken -textvariable mspeed -width 6
pack .ms.t1 .ms.e .ms.t2 -side left
# pack .ms



# input mode / integration time / gain entry structure
frame .itim -borderwidth 2 -relief ridge

label .itim.txt -text "counting time:"
label .itim.txt2 -text "ms"
label .itim.txt3 -text "input source"
radiobutton .itim.rb1 -text "counter" -variable inmode -value 0 \
    -command updateoptions
radiobutton .itim.rb2 -text "analog" -variable inmode -value 1 \
    -command updateoptions
label .itim.txt4 -text "analog gain:" 
radiobutton .itim.rb3 -text "1" -variable anagain -value 1
radiobutton .itim.rb4 -text "2" -variable anagain -value 2
radiobutton .itim.rb5 -text "4" -variable anagain -value 4
radiobutton .itim.rb6 -text "8" -variable anagain -value 8

entry .itim.entry -width 10 -relief sunken -bd 2 -textvariable itim
bind .itim.entry <Return> {
    if {[regexp {^\ *[0-9]+\ +$} "$itim "] == 1} {
	set ITIMINT $itim
    }
    set itim $ITIMINT
    .itim.entry configure -fg black
}
bind .itim.entry <KeyPress> {
    if {[lsearch $harmlesskeys %K]==-1} {.itim.entry configure -fg red }
}
#pack .itim.txt .itim.entry .itim.txt2 -side left
grid .itim.txt3 -sticky w
grid .itim.rb1 .itim.txt -sticky w
grid .itim.entry  -columnspan 2 -row 1 -column 3 -sticky w
grid .itim.txt2 -row 1 -column 5 -sticky w
grid .itim.rb2 .itim.txt4 .itim.rb3 .itim.rb4 .itim.rb5 .itim.rb6 -sticky w

# default configuration at start:
proc updateoptions {} {
    global inmode RUNNING
    if {$inmode == 0} {
	.itim.txt4 configure -fg #888
	.itim.rb3 configure -state disabled -fg #888
	.itim.rb4 configure -state disabled -fg #888
	.itim.rb5 configure -state disabled -fg #888
	.itim.rb6 configure -state disabled -fg #888
	if {$RUNNING == 1} {
	    .itim.txt configure -fg #888
	    .itim.entry configure -state disabled -fg #888
	} else {
	    .itim.txt configure -fg #000
	    .itim.entry configure -state normal -fg #000
	}
    } else {
	if {$RUNNING == 0} {
	    .itim.txt4 configure -fg #000
	    .itim.rb3 configure -state normal -fg #000
	    .itim.rb4 configure -state normal -fg #000
	    .itim.rb5 configure -state normal -fg #000
	    .itim.rb6 configure -state normal -fg #000
	} else {
	    .itim.rb3 configure -state disabled -fg #888
	    .itim.rb4 configure -state disabled -fg #888
	    .itim.rb5 configure -state disabled -fg #888
	    .itim.rb6 configure -state disabled -fg #888
	}
	.itim.txt configure -fg #888
	.itim.entry configure -state disabled -fg #888
    }
}

updateoptions

pack .itim


# file operation buttons
frame .fops
button .fops.save -text "save" -command savebutton
button .fops.exit -text "exit" -command exitbutton
button .fops.print -text "print" -command printbutton
bind .fops.save <Return> {.fops.save invoke}
bind .fops.exit <Return> {.fops.exit invoke}
bind .fops.print <Return> {.fops.pint invoke}
pack .fops.save .fops.exit .fops.print -side left
pack .fops

# axis options
frame .axops
button .axops.taxis -text "x axis" -command taxisbutton
button .axops.zaxis -text "z axis" -command zaxisbutton
button .axops.cnt -text "display options" -command cntoptbutton
bind .axops.taxis <Return> {.axops.taxis invoke}
bind .axops.zaxis <Return> {.axops.zaxis invoke}
pack .axops.taxis .axops.zaxis .axops.cnt -side left
pack .axops

# help button
frame .hlp
button .hlp.help -text "help" -command helpbutton
bind .hlp.help <Return> {.hlp.help invoke}
pack .hlp.help -side left
pack .hlp

# -------------------------------------------------------------
# working procedures 

# motor routines
# send command to motor
proc scmd {a} {
    global mothandle
    puts $mothandle $a
    flush $mothandle
}

# open stepper motor driver
proc initproc {} {
    global motprog mothandle mspeed motoldpos motoldpos1 0
    set mothandle [eval [concat open "{|$motprog"  2>/dev/null "}" w]]
    scmd "init 0 2"
    scmd "init 1 2"
    scmd "set 0 0"
    scmd "set 1 0"
    scmd "limit 0 0"
    scmd "limit 1 0"
    set motoldpos 0
    set motoldpos1 0
}
initproc

# zero motor position
proc motzero {} {
    global xact motoldpos 0
    scmd "set 0 0"
    set xact 0
    set motoldpos 0
}

#zero motor 1 position
proc motzero1 {} {
   global xact1 motoldpos1 0
   scmd "set 1 0"
   set xact1 0
   set motoldpos1 0
}

# motor exit routine
proc motexit {} {
    global mothandle
    scmd "off 0"
    scmd "off 1"
    scmd "exit"
    close $mothandle
}

# motor walk procedure
proc motgo {mp} {
    global gstat mspeed motconversion motoldpos
    set gstat "move"; update
    scmd "setspeed 0 $mspeed"
    set millisec [expr abs($mp-$motoldpos)*$motconversion/64/$mspeed*1000]
    set steps  [expr -int($mp*$motconversion)]
    set motoldpos $mp
    scmd "go 0 $steps"
    after [expr int($millisec / 1000)]
    #after 100
    set gstat "";update
}

proc motgo1 {mp} {
    global gstat mspeed motconversion motoldpos1
    set gstat "move"; update
    scmd "setspeed 1 $mspeed"
    set millisec [expr abs($mp-$motoldpos1)*$motconversion/64/$mspeed*1000]
    set steps  [expr -int($mp*$motconversion)]
    set motoldpos1 $mp
    scmd "go 1 $steps"
    after [expr int($millisec / 1000)]
    set gstat "";update
}

#procedure to calibrate te gnuplot convresion from angle to wavelength
proc gnucalibrate {} {
    global gnu henefirst zeroorder grating lamhene
   # output calibration routine for wavelength calibration
    puts $gnu "g=$grating"
  # puts $gnu "g=1000/1.2"
    puts $gnu "lhene=$lamhene"
    puts $gnu "f=pi/180"
    puts $gnu "phi0=$zeroorder*f"
    puts $gnu "phi1=$henefirst*f"
  #  puts $gnu "B=632.8"
    puts $gnu "ct=lhene/2/g/sin(phi0-phi1)"
    puts $gnu "A=2*g*ct**2"
    puts $gnu "B=-2*g*sqrt(1-ct**2)*ct"
   # puts $gnu "A=g*(1+sqrt(1-(B/g)**2))"
    puts $gnu "epsilon=phi0-acos(ct)+pi"
 # puts $gnu "epsilon=0"
    puts $gnu "lam(phi)=A*sin(phi*f-epsilon)+B*cos(phi*f-epsilon)"
} 


#procedure to open gnuplot
set gnu 1      ;# file handle
proc gnuopen {} {
    global gnu
    set gnu [open {|gnuplot -title scandata 2>/dev/null} w]
    gnucalibrate
}
gnuopen

# procedure to refresh gnuplot
proc regnu {} {
    global gnu wd XAXMIN XAXMAX ZAXMIN ZAXMAX tmpfile dispopt
    if {$dispopt == 0} { set x "(\$1)" } else { set x "(\$1)*360/600"}
   puts $gnu "plot \[$XAXMIN\:$XAXMAX\] \[$ZAXMIN\:$ZAXMAX\] '$tmpfile' using $x:2 notitle with  lines lt 1 lw 3, '$tmpfile' using $x:3  notitle with lines lt 3 lw 3, '$tmpfile' using $x:(\$4*100)  notitle with lines lt 4 lw 3"
    flush $gnu
}

# procedure to close gnuplot
proc gnuclose {} {
    global gnu
    puts $gnu "exit"
    close $gnu
}
# proc bgerror {msg } { exit }

# procedure for lin scale 
proc gnulin {} {
    global gnu
    puts $gnu "set nologscale y"
    flush $gnu
}
proc gnulog {} {
    global gnu
    puts $gnu "set logscale y"
    flush $gnu
}
# gnu printing utilities
proc gnups {printer} {
    global gnu
    puts $gnu "set terminal postscript monochrome \"Helvetica\" 24 "
    puts $gnu "set output \"|lpr -P$printer \""
    regnu ; puts $gnu "set terminal x11"; puts $gnu "set output" ; regnu
}
proc gnueps {file} {
    global gnu sd
    puts $gnu "set terminal postscript eps \"Helvetica\" 24"
    puts $gnu "set output \"$sd/$file\""
    regnu ; puts $gnu "set terminal x11"; puts $gnu "set output" ; regnu
}




# procedures for axis control
proc taxisbutton {} {
    global XAXMIN XAXMAX
    set tmi $XAXMIN ; set tma $XAXMAX
    if {[winfo exists .tax]} return
    frame .tax -relief ridge -borderwidth 2
    button .tax.auto -text "auto" -command {
	set tmi [set XAXMIN ""] ; set tma [set XAXMAX ""] ; regnu }
    label .tax.l1 -text "x start: "
    entry .tax.e1  -width 10 -relief sunken -bd 2 -textvariable tmi
    bind  .tax.e1 <Return> { if {$tmi < $XAXMAX } {
	set XAXMIN $tmi ; regnu } else { set tmi $XAXMIN } }
    label .tax.l2 -text "x end: "
    entry .tax.e2  -width 10 -relief sunken -bd 2 -textvariable tma
    bind  .tax.e2 <Return> { if {$tma > $XAXMIN } {
	set XAXMAX $tma ; regnu } else { set tma $XAXMAX } }
    button .tax.ok -text "ok" -command {destroy .tax}
    pack .tax.auto .tax.l1 .tax.e1 .tax.l2 .tax.e2 .tax.ok -side left
    pack .tax
}

proc zaxisbutton {} {
    global ZAXMIN ZAXMAX
    set zmi $ZAXMIN ; set zma $ZAXMAX
    if {[winfo exists .zax]} {destroy .zax ; return}
    frame .zax -relief ridge -borderwidth 2 ; frame .zax.1 ; frame .zax.2
    button .zax.1.auto -text "auto" -command {
	set zmi [set ZAXMIN ""] ; set zma [set ZAXMAX ""] ; regnu }
    label .zax.1.l1 -text "z start: "
    entry .zax.1.e1  -width 10 -relief sunken -bd 2 -textvariable zmi
    bind  .zax.1.e1 <Return> { if {$zmi < $ZAXMAX } {
	set ZAXMIN $zmi ; regnu } else { set zmi $ZAXMIN } }
    label .zax.1.l2 -text "z end: "
    entry .zax.1.e2  -width 10 -relief sunken -bd 2 -textvariable zma
    bind  .zax.1.e2 <Return> { if {$zma > $ZAXMIN } {
	set ZAXMAX $zma ; regnu } else { set zma $ZAXMAX } }
    button .zax.1.ok -text "ok" -command {destroy .zax}
    set ZSCALE 1
    radiobutton .zax.2.lin -text "lin scale" -variable ZSCALE -value 1 \
	    -command { gnulin ; regnu }
    radiobutton .zax.2.log -text "log scale" -variable ZSCALE -value 2 \
	    -command { gnulog ; regnu }
    pack .zax.1.auto .zax.1.l1 .zax.1.e1 .zax.1.l2 .zax.1.e2 .zax.1.ok \
	    -side left
    pack .zax.2.lin .zax.2.log -side left
    pack .zax.1 .zax.2 ; pack .zax
}
proc cntoptbutton {} {
    global dispcnter dispopt henefirst zeroorder henefirsttmp zeroordertmp 
    if {[winfo exists .dopt]} {destroy .dopt ; return}
    frame .dopt -relief ridge -borderwidth 2 ;
    frame .dopt.1 ; frame .dopt.2 ; frame .dopt.3

    radiobutton .dopt.2.b1 -text "steps" -variable dispopt -value 0 -command regnu
    radiobutton .dopt.2.b2 -text "degrees" -variable dispopt -value 1 -command regnu
    label .dopt.2.t1 -text "display option"
    label .dopt.3.t1 -text "take max of counter"
    for {set i 1 } {$i < 7} {incr i 1} {
	radiobutton .dopt.3.rb$i -text $i -variable dispcnter -value $i
    }
    pack .dopt.2.t1 .dopt.2.b1 .dopt.2.b2 -side left
    pack .dopt.3.t1 -side left
    for {set i 1 } {$i <7} {incr i 1} { pack .dopt.3.rb$i -side left }
    pack .dopt.1 .dopt.2 .dopt.3
    pack .dopt
       
}


# procedure for gothere button
proc gotherebutton {} {
    global mcntsx xact
    set xact $mcntsx
    motgo [expr $xact-0.5]
    motgo $xact
}



# procedure for halt button
proc haltbutton {} {
    .x.e3 configure -state normal -fg #000
    .x.go configure -state normal -fg #000
    global RUNNING
    set RUNNING 0
}


proc clearbutt {} {
    global xact SAVED tmpfile XMININIT maxcounts mcntsx
    motgo [expr $XMININIT-0.5]
    motgo $XMININIT
    set maxcounts 0
    set mcntsx $XMININIT
    .x.e1 configure -state normal -fg #000
    .x.e3 configure -state normal -fg #000
    .itim.entry configure -state normal -fg #000
    .ms.e configure -state normal -fg #000
    .x.go configure -state normal -fg #000
    .itim.rb1 configure -state normal -fg #000
    .itim.rb2 configure -state normal -fg #000
    updateoptions

    if {[file exists $tmpfile]} {
	exec rm $tmpfile }
    set xact $XMININIT
}

proc clearbutt1 {} {
    global xact1 SAVED tmpfile XMININIT1 maxcounts mcntsx
    motgo1 [expr $XMININIT1-0.5]
    motgo1 $XMININIT1
    set maxcounts 0
    set mcntsx $XMININIT1
    .x1.e1 configure -state normal -fg #000
    .x1.e3 configure -state normal -fg #000
    .itim.entry configure -state normal -fg #000
    .ms.e configure -state normal -fg #000
    .itim.rb1 configure -state normal -fg #000
    .itim.rb2 configure -state normal -fg #000
    updateoptions

    if {[file exists $tmpfile]} {
        exec rm $tmpfile }
    set xact1 $XMININIT1
}

# procedure to loop during run - start button
proc runproc1 {} {
	global RUNNING xact1 XMAXINIT1 XMININIT1 XINCINIT1 XOWS ITIMINT tmpfile gstat countprog maxcounts mcntsx dispcnter inmode analogprog anagain
    if {$RUNNING != 0} return
    set RUNNING 1
    .x1.e1 configure -state disabled -fg #888
    .x1.e3 configure -state disabled -fg #888
    .itim.entry configure -state disabled -fg #888
    .ms.e configure -state disabled -fg #888
    .itim.rb1 configure -state disabled -fg #888
    .itim.rb2 configure -state disabled -fg #888
    updateoptions

    .sfr.start configure -relief sunken
    if {[expr ($xact1 < $XMAXINIT1)&&($XINCINIT1>0) ||($xact1 > $XMAXINIT1)&&($XINCINIT1<0)] } {
        if {[expr (($xact1 <= $XMININIT1)&&($XINCINIT1>0) ||($xact1 >= $XMININIT1)&&($XINCINIT1<0))] } {
            set xact1 $XMININIT1
            # set motor pos.
            motgo1 $xact1
            if {$inmode == 0} {
                set gstat "counting"; update ; # for counter card
                set tmptxt [exec $countprog -t $ITIMINT]
            } else {
                set gstat "reading"; update ; # for analog card
                set tmptxt [exec $analogprog -g $anagain]
            }
            # get maximum
            set actcounts [lindex $tmptxt [expr $dispcnter - 1] ]
            if { $actcounts > $maxcounts } {
                set maxcounts $actcounts
                set mcntsx $xact1
            }
            set tmptxt "$xact1 $tmptxt"
	    set gstat ""; update
            exec echo $tmptxt  >$tmpfile
        }
    } else {regnu; .sfr.start configure -relief raised ; set RUNNING 0 ; return }
    regnu
    update

    while {[expr ($RUNNING != 0) && (($xact1 < $XMAXINIT1)&&($XINCINIT1>0) ||($xact1 > $XMAXINIT1)&&($XINCINIT1<0)) ]} {
        set xact1 [expr $xact1+$XINCINIT1]
        motgo1 $xact1
        if {$inmode == 0} {
            set gstat "counting"; update ; # for counter card
            set tmptxt [exec $countprog -t $ITIMINT]
        } else {
            set gstat "reading"; update ; # for analog card
            set tmptxt [exec $analogprog -g $anagain]
        }
        # get maximum
        set actcounts [lindex $tmptxt [expr $dispcnter - 1]]
        if { $actcounts > $maxcounts } {
            set maxcounts $actcounts
            set mcntsx $xact1
        }

        set tmptxt "$xact1 $tmptxt"
        set gstat ""; update
        exec echo $tmptxt >>$tmpfile
        regnu
        update
    }
    if { $RUNNING != 0 } {
        motgo1 $XMININIT1
        set xact1 $XMININIT1
    }
    .sfr.start configure -relief raised
    set gstat "idle"
    set RUNNING 0
}

proc runproc {} {
    global RUNNING xact XMAXINIT XMININIT XINCINIT XOWS ITIMINT tmpfile gstat countprog maxcounts mcntsx dispcnter inmode analogprog anagain
    if {$RUNNING != 0} return
    set RUNNING 1
    .x.e1 configure -state disabled -fg #888
    .x.e3 configure -state disabled -fg #888
    .itim.entry configure -state disabled -fg #888
    .ms.e configure -state disabled -fg #888
    .x.go configure -state disabled -fg #888
    .itim.rb1 configure -state disabled -fg #888
    .itim.rb2 configure -state disabled -fg #888
    updateoptions

    .mfr.start configure -relief sunken
    if {[expr ($xact < $XMAXINIT)&&($XINCINIT>0) ||($xact > $XMAXINIT)&&($XINCINIT<0)] } {
	if {[expr (($xact <= $XMININIT)&&($XINCINIT>0) ||($xact >= $XMININIT)&&($XINCINIT<0))] } {
	    set xact $XMININIT
	    # set motor pos.
	    motgo $xact
	    if {$inmode == 0} {
		set gstat "counting"; update ; # for counter card
		set tmptxt [exec $countprog -t $ITIMINT]
	    } else {
		set gstat "reading"; update ; # for analog card
		set tmptxt [exec $analogprog -g $anagain]
	    }
	    # get maximum
	    set actcounts [lindex $tmptxt [expr $dispcnter - 1] ]
	    if { $actcounts > $maxcounts } {
		set maxcounts $actcounts
		set mcntsx $xact
	    }
	    set tmptxt "$xact $tmptxt"
	    set gstat ""; update
	    exec echo $tmptxt  >$tmpfile
	}
    } else {regnu; .mfr.start configure -relief raised ; set RUNNING 0 ; return }
    regnu
    update

    while {[expr ($RUNNING != 0) && (($xact < $XMAXINIT)&&($XINCINIT>0) ||($xact > $XMAXINIT)&&($XINCINIT<0)) ]} {
	set xact [expr $xact+$XINCINIT]
	motgo $xact
	if {$inmode == 0} {
	    set gstat "counting"; update ; # for counter card
	    set tmptxt [exec $countprog -t $ITIMINT]
	} else {
	    set gstat "reading"; update ; # for analog card
	    set tmptxt [exec $analogprog -g $anagain]
	}
	# get maximum
	set actcounts [lindex $tmptxt [expr $dispcnter - 1]]
	if { $actcounts > $maxcounts } {
	    set maxcounts $actcounts
	    set mcntsx $xact
	}
	
	set tmptxt "$xact $tmptxt"
	set gstat ""; update
	exec echo $tmptxt >>$tmpfile
	regnu
	update
    }
    if { $RUNNING != 0 } {
	motgo $XMININIT
	set xact $XMININIT
    }
    .mfr.start configure -relief raised
    .x.go configure -state normal -fg #000

    set gstat "idle"
    set RUNNING 0
}


# procedure save button
proc savebutton {} {
    global sd tmpfile ITIMINT mspeed
    if {[winfo exists .fsel]} return
    global fname COMMENT SAVED inmode anagain 
    global zeroorder henefirst lamhene dispopt
    if {[getfilename] == ""} return
    exec cat $tmpfile >$sd/$fname
    set outfile [open $sd/$fname a+ ]
    puts $outfile "# output of spectrometer scanning program."
    if {$inmode == 0} {
	puts $outfile "# counter mode; integration time: $ITIMINT msec"
    } else {
	puts $outfile "# analog input mode; analog gain: $anagain"
    }	
    if {$dispopt == 0} {
	set tmptxt "grating angle in degrees." 
    } else {
	set tmptxt "wavelength in nanometer. Zero order at $zeroorder deg, 1st HeNe at $henefirst deg, assuming HeNe = $lamhene nm"
    }
    puts $outfile "# motor speed: $mspeed steps/sec"
    puts $outfile "# 1st column is $tmptxt"
    puts $outfile "# current date: [exec date]"
    puts $outfile "# comment on this run: $COMMENT"
    close $outfile 
    set SAVED 1
}
proc getfilename {} {
    global fname COMMENT sd sdl
    frame .fsel -relief ridge -borderwidth 2
    frame .fsel.dir
    frame .fsel.one
    frame .fsel.three
    frame .fsel.two
    label .fsel.dir.t -text "current directory: "
    entry .fsel.dir.e -relief sunken -width 20 -bd 2 -textvariable sdl
    .fsel.dir.e xview moveto 1
    bind .fsel.dir.e <Return> {
	if {[file isdirectory $sdl]} {set sd $sdl } else {set sdl $sd}
    }
    label .fsel.one.t -text "Enter file name: "
    entry .fsel.one.e -relief sunken -width 20 -bd 2 -textvariable fname
    label .fsel.three.t -text "current comment: "
    entry .fsel.three.e -relief sunken -width 20 -bd 2 -textvariable COMMENT
    bind .fsel.one.e <Return> {
	if {[file exists $fname]} {
	    pack .fsel.two.w .fsel.two.t .fsel.two.b -side left	    
	} else { destroy .fsel }
    }
    label .fsel.two.w -bitmap warning
    label .fsel.two.t -text " File exists "
    button .fsel.two.b -text "Overwrite" -command { destroy .fsel }
    button .fsel.two.c -text "Cancel" -command { set fname "" ; destroy .fsel }
    bind .fsel.two.c <Return> {.fsel.two.c invoke}
    pack .fsel.dir.t .fsel.dir.e -side left
    pack .fsel.two.c -side right
    pack .fsel.one.t .fsel.one.e -side left
    pack .fsel.three.t .fsel.three.e -side left
    pack .fsel.dir .fsel.one .fsel.three .fsel.two
    pack .fsel
    tkwait window .fsel
    return $fname
}



# printer button
set LP "lp"
proc printbutton {} {
    global LP
    if {[winfo exists .pri]} return
    frame .pri -relief ridge -borderwidth 2
    frame .pri.one ; frame .pri.two ; frame .pri.three
    label .pri.one.t -text "PostScript printer: "
    entry .pri.one.e -width 5 -relief sunken -bd 2 -textvariable LP
    button .pri.one.b -text "Print" -command {
	gnups $LP ; destroy .pri ; return
    }
    label .pri.two.t -text "eps file : "
    entry .pri.two.e -width 5 -relief sunken -bd 2 -textvariable efna
    button .pri.two.b -text "save to" -command {
	gnueps $efna ; destroy .pri ; return 
    }
    button .pri.three.b -text "cancel" -command {destroy .pri ; return }
    pack .pri.one.t .pri.one.e .pri.one.b -side left
    pack .pri.two.t .pri.two.e .pri.two.b -side left
    pack .pri.three.b -side left
    pack .pri.one .pri.two .pri.three -side top
    pack .pri
}  

# procedure exit button
proc exitbutton {} {
    global tmpfile xact
    if {$xact != 0} {
	motgo 0
    }
    motexit
    if {[file exists $tmpfile]} {
	exec rm $tmpfile }
    exit
}
bind .fops.exit <Return> exit

#procedure help button
proc helpbutton {} {
    frame .hel  -relief ridge -borderwidth 2 -bg white -pady 10 -padx 10
    label .hel.t -text "Run 1 motor at a time only."
    label .hel.b1 -text "This program is to run two motors so as to do polarization analysis." 
    label .hel.b2 -text "Rotary Stage 1 is used to select a half-wave plate angle" 
    label .hel.b1 -text "Rotary Stage 2 is used to move another half-wave plate over a range of angles" 

    button .hel.bfinal -text "Close" -command { destroy .hel }
    grid .hel.t -row 0 -column 1 -columnspan 2
    grid .hel.b1 -row 1 -column 1
    grid .hel.bfinal -row 2 -column 1
    pack .hel
}


# proedure zero button
proc zerobutton {} {
    frame .zer  -relief ridge -borderwidth 2 -bg red -pady 10 -padx 10
    label .zer.w -bitmap warning
    label .zer.t -text "You are about to reset the zero degree position!"
    button .zer.b1 -text "Yes, thats what I want" -command { 
	motzero; destroy .zer }

    button .zer.b2 -text "No, please not" -command { destroy .zer }
    grid .zer.w 
    grid .zer.t -row 0 -column 1 -columnspan 2
    grid .zer.b1 -row 1 -column 1
    grid .zer.b2 -row 1 -column 2
    pack .zer
}

# proedure zero1 button
proc zerobutton1 {} {
    frame .zer  -relief ridge -borderwidth 2 -bg red -pady 10 -padx 10
    label .zer.w -bitmap warning
    label .zer.t -text "You are about to reset the zero degree position!"
    button .zer.b1 -text "Yes, thats what I want" -command {
        motzero1; destroy .zer }

    button .zer.b2 -text "No, please not" -command { destroy .zer }
    grid .zer.w
    grid .zer.t -row 0 -column 1 -columnspan 2
    grid .zer.b1 -row 1 -column 1
    grid .zer.b2 -row 1 -column 2
    pack .zer
}

#procedure to calculate the visibility
proc regnu2 {} {
    global gnu wd XAXMIN XAXMAX ZAXMIN ZAXMAX tmpfile visibility dvis
    global XMININIT XMAXINIT XINCINIT maxcounts
    puts $gnu "A=maxcounts/2"
    puts $gnu "B=maxcounts/2"
    puts $gnu "C=maxcounts/20"
    puts $gnu "x=0"
    puts $gnu "f(x) = A*sin(x*2*3.142/90) + B*cos(x*2*3.142/90) + C"
    puts $gnu "fit f(x) '$tmpfile' using 1:2 via A,B,C"
    puts $gnu "set nokey"
    puts $gnu "plot \[$XAXMIN\:$XAXMAX\] \[$ZAXMIN\:$ZAXMAX\] '$tmpfile' using 1:2:(sqrt(\$4)) with yerrorbars , f(x) with lines"
    flush $gnu
    exec sleep 2
    set C [exec tail -n 15 fit.log | grep "C" | grep "+/-" | sed -e {s/\(.*=\)\(.*\)\(+.*\)/\2/}]
    set dC [exec tail -n 15 fit.log | grep "C" | grep "+/-" | sed -e {s/\(.*-\)\(.*\)\((.*\)/\2/}]
    set A [exec tail -n 15 fit.log | grep "A" | grep "+/-" | sed -e {s/\(.*=\)\(.*\)\(+.*\)/\2/}]
    set dA [exec tail -n 15 fit.log | grep "A" | grep "+/-" | sed -e {s/\(.*-\)\(.*\)\((.*\)/\2/}]
    set B [exec tail -n 15 fit.log | grep "B" | grep "+/-" | sed -e {s/\(.*=\)\(.*\)\(+.*\)/\2/}]
    set dB [exec tail -n 15 fit.log | grep "B" | grep "+/-" | sed -e {s/\(.*-\)\(.*\)\((.*\)/\2/}]
    set A1 [expr sqrt($A*$A + $B*$B) ]
    set dA1 [expr (($A*$dA + $B*$dB)/$A1)]
    set Imax [expr ($A1 + $C)]
    set dI [expr ($dA1 + $dC)]
    set Imin [expr (-$A1 + $C)]
    set visibility [expr (($Imax - $Imin)/($Imax + $Imin))]
    set dvis [expr ((2*$dI)/($Imax + $Imin))] 
}
