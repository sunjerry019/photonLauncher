"""
this is supposed to process the data files generated by livespec.py

known bugs:
- scaling of y values
- set label in gnuplot to display fit equation

other issues:
-shitty gnuplot variables, not yet optimised
- doesnt do error propagation from the measured tungsten spectrum
ie errors are underestimated
- quite clunky?
"""


import sys, glob, argparse, time
import numpy as np
import Gnuplot
from scipy.constants import h,c,k
from math import exp

def main(D, process, description, gaussian, zoom):
    if process==True:
        ###get wavelengths and tungsten values for calibration
        lambda_=[]
        tungsten=[]
        f=open("calibration_data", 'r')
        for line in f:
            lambda_.append(float(line.split('\t')[0]))
            tungsten.append(float(line.split('\t')[1]))
        f.close()

        #check wavelength
        lamdba_=[]
        raw=open("%s/data_1" %D,'r')
        for line in raw:
            lamdba_.append(float(line.split("\t")[0]))
        raw.close()

        if lambda_==lamdba_:
            pass
        else:
            sys.exit("Error: Wavelength values do not match with calibration wavelengths! Unable to calibrate data.")


        #calculate scaling factors
        T=3100
        blackbody=[]
        for wavelength in lambda_:
            wavelength=wavelength*10**-9
            value=1/((wavelength**5)*(exp(h*c/wavelength/k/T)-1))
            blackbody.append(value)

        ###put intensity values for each wavelength into a list
        n=len(glob.glob('%s/data_*' %D))
        print("%s data files to process." %n)
        if n>1000:
            wait=[]
            for i in range(int(n/1000)):
                i+=1
                wait.append(i*1000)
        print("Extracting and calibrating data...")
        raw=[]
        for i in range(n):
            lines=open("%s/data_%s" %(D,i+1),'r').readlines()
            for j in range(len(lines)):
                lines[j]=lines[j].split('\t')[1]
                lines[j]=float(lines[j].replace('\n',''))
                #calibration line
                lines[j]=lines[j]*blackbody[j]/tungsten[j]
            raw.append(lines)
            #progress
            if n>1000:
                if i in wait:
                    percent=int(100*(i+1)/n)
                    print("%s%%" %percent)
                if i==(n-1):
                    print("100%")

        print("Sorting data...")
        Lst=[]
        for j in range(len(lambda_)):
            lst=[]
            for i in range(n):
                lst.append(raw[i][j])
            Lst.append(lst)
            #progress
            if n>1000:
                x=n/1000
                old_percent=int(100*(j)/(len(lambda_))%n)
                new_percent=100*(j+1)/(len(lambda_))
                test=int(new_percent%n)
                if test==0 and test!=old_percent:
                    print(str(int(new_percent)) + '%')

        #scale intensity values for plotting within yrange[0:10000]
        Lst_mean=[]
        for i in range(len(Lst)):
            Lst_mean.append(np.mean(Lst[i]))
        scale=9000/max(Lst_mean)
        for i in range(len(Lst)):
            for j in range(len(Lst[i])):
                Lst[i][j]=scale*Lst[i][j]

        #write wavelength, intensity (mean,std) into new data file
        f=open("%s/processed_data" %D, 'w+')
        for i in range(len(Lst)):
            f.write(str(lambda_[i])+'\t'+str(np.mean(Lst[i]))+'\t'+str(np.std(Lst[i],ddof=1))+'\n')
        f.close()


    ###plot
    class OutOfRangeError(Exception):
        pass
    if description != None:
        try:
            g=Gnuplot.Gnuplot()
            g("set term eps enhanced colour size 4in,3in font \"Arial,12\"")
            g("set output \"%s/%s.eps\"" %(D, description))
            g("set xlabel \"{/Symbol l} [nm]\" font \"Arial,12\"")
            g("set ylabel \"Relative intensity\" font \"Arial,12\"")
            g("set xtics border mirror in font \"Arial,12\"")
            g("set ytics border mirror in font \"Arial,12\"")
            g("unset x2tics")
            g("set xrange[350:10000]")
            g("set yrange [0:10000]")
            g("set bars 0.7")
            g("set border 31 lw 2")
            g("set samples 1000")
            g("unset key")
            if (gaussian>=350) and (gaussian<=1000):
                g("A=9000\nmu=%s\nsigma=1\ny_0=200" %gaussian)
                g("f(x)=A*exp(-(x-mu)**2/(2*sigma**2))+y_0")
                g("FIT_LIMIT=1e-10\nFIT_MAXITER=1000")
                g("set fit errorvariables")
                g("set fit logfile \'%s_fit.log\'" %description)
                g("fit f(x) '%s/processed_data' using 1:2:3 errors z via A,mu,sigma,y_0" %D)
                if zoom==True:
                    g("a=mu-5*sigma\nb=mu+5*sigma")
                    g("set xrange [a:b]")
                g("plot \'%s/processed_data\' u 1:2:3 with errorbars pt 7 ps 0.2 lw 1 lc rgb \"black\", f(x) lc rgb \"red\"" %D)
                g("set label sprintf(\'I=(%%f\261%%f)*e**{-({/Symbol l}-%%f\261%%f)**2/(2*%%f\261%%f**2)}+(%%f\261%%f)\', A,A_err,mu,mu_err,sigma_sigma_err,y_0,y_0_err) at a,9000 tc rgb \"black\"")
            elif gaussian==False:
                g("plot \'%s/processed_data\' u 1:2:3 with errorbars pt 7 ps 0.2 lw 2 lc rgb \"black\"" %D)
            else:
                raise OutOfRangeError
        except OutOfRangeError:
            sys.exit("Out of range! Pick wavelength between 350nm and 1000nm.")



def init():
    parser = argparse.ArgumentParser("Process, calibrate and/or plot data from the OceanOptics spectrometer USB4000-VIS-NIR")
    parser.add_argument('D', type=str, help="name of directory containing data files")
    parser.add_argument('-p', '--process', action='store_true', help="flag to process/calibrate data, unless previously done so")
    parser.add_argument('-d', '--description', type=str, help="description for .eps plot file; flag to plot", default=None)
    parser.add_argument('-g', '--gaussian', type=float, help="initial guess for peak wavelength in nm (between 350nm and 1000nm); flag to fit to gaussian distribution", default=False)
    parser.add_argument('-z', '--zoom', action='store_true', help="flag for plot to zoom into gaussian peak")
    args = parser.parse_args()

    main(args.D, args.process, args.description, args.gaussian,args.zoom)
init()
